# Common data shared by plot server and client

# All these imports are needed to successfully pickle/unpickle 
# standard matplotlib data
import xmlrpclib
import pickle
import numpy
import matplotlib
import matplotlib.pylab

#-------------------- GLOBALS ----------------
defaultPort = 8397

version_tuple = (0,1,0)
version_qualifier = 'a4'
__version__ = ("%s.%s.%s" % version_tuple) + version_qualifier

def check_version(server_version):
    """Check if the server_version doesn't match the client version"""
    sv = server_version
    cv = version_tuple
    if sv[0] != cv[0] or sv[1] != cv[1]:
        raise RuntimeError('Versions do not match: server=%s client=%s'%(sv,cv))

class KeywordArgs:
    """A very simple class wrapper around a dictionary of keywords.
    The only member is .dict which returns the keyword dictionary.
    This class just gives the marshalling a particular type to key off off to 
    recognize a keyword argument. That's necessary because xmlrpclib.ServerProxy
    does not know how to handle keyword arguments, so we have to hide them."""
    def __init__(self, kwdict):
        self.dict = kwdict

PlainTypes = set(
    [xmlrpclib.BooleanType,
     xmlrpclib.BufferType,
     xmlrpclib.ComplexType,
     xmlrpclib.IntType,
     xmlrpclib.StringType,
     xmlrpclib.FloatType])

def marshall(a):
    """Marshalls (encodes) data for calling the plot server"""
    if type(a) in PlainTypes:
        return a
    # Just wrap everything else as a binary pickle.
    return xmlrpclib.Binary(pickle.dumps(a))

def marshall_keywords(kw):
    """Marshalls (encodes) keyword arguments for calling the plot server"""
    # Just wrap everything as one big binary pickle.
    return xmlrpclib.Binary(pickle.dumps(KeywordArgs(kw)))

def unmarshall(a):
    """Un-marshalls (decodes) data for calling the plot server"""
    if isinstance(a, xmlrpclib.Binary):
        arg = pickle.loads(a.data)
    else:
        arg = a
    return arg

